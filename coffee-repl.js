// Generated by CoffeeScript.org
(function() {
var _eval, autocomplete, dir, getPropertys, include, space, suggest, type;

if (typeof REPL === "undefined" || REPL === null) {
  window.REPL = (function() {
    var repl;

    repl = null;

    function REPL() {
      if (repl != null) {
        return repl;
      }
      repl = this;
      this.run = false;
      this.env = {
        log: (function(_this) {
          return function(str) {
            _this.printbuffer += str + "\n";
            return void 0;
          };
        })(this),
        clear: (function(_this) {
          return function() {
            _this.printbuffer = "";
            _this.printlogs = ["", "", "", "", ""];
            return void 0;
          };
        })(this),
        dir: dir,
        type: type,
        grep: null,
        include: include,
        $_: void 0
      };
      this.history = [];
      this.printbuffer = "";
      this.printlogs = ["", "", "", "", ""];
      this.defaultInput = "";
      this.prompt = "coffee> ";
    }

    REPL.prototype.help = ".exit / Exit the REPL\n.help / Show repl options\n. / last input\n.n / nth input\n.jQuery / include(\"jQuery.js\")\n.underscore / include(\"underscore.js\")\n.prototype / include(\"prototype.js\")\n.livescript / include(\"livescript.js\")\n\nword[space][OK] / autocomplete \n\nlog(str)\nclear()\ndir(obj [, maxCallNum])\ntype(obj)\ninclude(url)\n$_";

    REPL.prototype.start = function() {
      this.run = true;
      return this.loop();
    };

    REPL.prototype.loop = function() {
      var ary, begin, err, error, input, n, pre, ref;
      input = prompt(this.printlogs.join("\n"), this.defaultInput) || ".exit";
      console.log(input);
      this.defaultInput = "";
      begin = this.prompt + input + "\n";
      if (/\.exit$/.test(input)) {
        this.run = false;
        this.printlogs.unshift(begin + "\n");
      } else if (/\.help$/.test(input)) {
        this.printlogs.unshift((begin + this.help) + "\n");
      } else if (/\.jQ(uery)$/i.test(input)) {
        this.printlogs.unshift(begin);
        this.run = false;
        include("//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js", (function(_this) {
          return function() {
            return _this.start();
          };
        })(this));
      } else if (/\.underscore$/i.test(input)) {
        this.printlogs.unshift(begin);
        this.run = false;
        include("http://underscorejs.org/underscore-min.js", (function(_this) {
          return function() {
            return _this.start();
          };
        })(this));
      } else if (/\.prototype$/i.test(input)) {
        this.printlogs.unshift(begin);
        this.run = false;
        include("//ajax.googleapis.com/ajax/libs/prototype/1.7.1.0/prototype.js", (function(_this) {
          return function() {
            return _this.start();
          };
        })(this));
      } else if (/\.live(script)?$/i.test(input)) {
        this.printlogs.unshift(begin);
        this.run = false;
        include("http://livescript.net/livescript-1.4.0-min.js", (function(_this) {
          return function() {
            CoffeeScript.compile = LiveScript.compile;
            _this.prompt = "live> ";
            return _this.start();
          };
        })(this));
      } else if (false !== (n = (/\.(\d*)$/.exec(input) || [false, false])[1])) {
        this.defaultInput = this.history[n || 0];
      } else if (/\s$/.test(input)) {
        ref = autocomplete(input, this.env), pre = ref[0], ary = ref[1];
        if (ary.length === 1) {
          this.defaultInput = (pre + " " + ary[0]).replace(/^\s+/, "");
        } else {
          this.defaultInput = input.replace(/\s+$/, "");
          this.printlogs.unshift((begin + ary.join("\n")) + "\n");
        }
      } else {
        this.history.unshift(input);
        try {
          this.env.$_ = _eval(input, this.env);
        } catch (error) {
          err = error;
          this.env.$_ = "" + err;
        }
        this.printlogs.unshift("" + (begin + this.printbuffer) + (dir(this.env.$_)));
        this.printbuffer = "";
      }
      console.log(this.printlogs[0]);
      this.printlogs.length = 5;
      if (this.run) {
        setTimeout((function(_this) {
          return function() {
            return _this.loop();
          };
        })(this));
      }
      return void 0;
    };

    return REPL;

  })();
}

include = function(url, next) {
  var script;
  script = document.createElement("script");
  script.src = url;
  script.onload = next;
  document.body.appendChild(script);
  return void 0;
};

_eval = function(code, env) {
  var args, oprs;
  if (env == null) {
    env = {};
  }
  args = Object.keys(env);
  oprs = args.map((function(_this) {
    return function(key) {
      return env[key];
    };
  })(this));
  return Function.apply(null, args.concat(CoffeeScript.compile("return do->\n  " + code.split("\n").join("\n  "), {
    bare: true
  }))).apply(window, oprs);
};


/*
console.assert(_eval("do->window") is window, "_eval")
 */

getPropertys = function(o) {
  var _ary, ary, key, tmp;
  if (o == null) {
    return [];
  }
  ary = [].concat(Object.getOwnPropertyNames(o), (function() {
    var results;
    results = [];
    for (key in o) {
      results.push(key);
    }
    return results;
  })());
  tmp = {};
  _ary = ary.filter(function(key) {
    if (tmp[key] != null) {
      return false;
    } else {
      return tmp[key] = true;
    }
  });
  return _ary.sort();
};


/*
console.assert(""+getPropertys({a:0}) is ""+getPropertys(Object.create({a:0})), "getPropertys")
 */

suggest = function(code, token, env) {
  var err, error, reg, result;
  if (env == null) {
    env = {};
  }
  reg = new RegExp("^" + token + ".*");
  try {
    result = _eval(code, env);
  } catch (error) {
    err = error;
    result = {};
  }
  return getPropertys(result).filter(function(key) {
    return reg.test(key);
  });
};


/*
console.assert(suggest("window", "conso")[0] is "console", "suggest conso")
console.assert(suggest("console", "lo")[0]   is "log",     "suggest console.lo")
console.assert(suggest("Math", "p")[0]       is "pow",     "suggest Math.p")
 */

autocomplete = function(code, env) {
  var ary, key, obj, pre, result, token, tokens;
  if (env == null) {
    env = {};
  }
  tokens = (code + " ").split(/\s+/).slice(0, -1);
  token = tokens.pop();
  pre = tokens.join(" ");
  if (token.indexOf(".") === -1) {
    result = suggest("window", token, env).map(function(str) {
      return str.replace(/\s+$/, "");
    });
  } else {
    ary = token.split(".");
    obj = ary.slice(0, -1).join(".");
    key = ary[ary.length - 1];
    result = suggest(obj, key, env).map(function(str) {
      return obj + "." + str.replace(/\s+$/, "");
    });
  }
  return [pre, result];
};


/*
console.assert(autocomplete("conso")[0]         is "" and
               autocomplete("conso")[1][0]      is "console",      "autocomplete conso")
console.assert(autocomplete("console.lo")[0]    is "" and
               autocomplete("console.lo")[1][0] is "console.log",  "autocomplete console.lo")
console.assert(autocomplete("if {a:0}.")[0]     is "if"
               autocomplete("if {a:0}.")[1][0]  is "{a:0}.a",      "autocomplete {a:0}.")
 */

type = function(o) {
  var _type;
  if (o === null) {
    return "null";
  } else if (o === void 0) {
    return "undefined";
  } else if (o === window) {
    return "global";
  } else if (o.nodeType) {
    return "node";
  } else if (typeof o !== "object") {
    return typeof o;
  } else {
    _type = Object.prototype.toString.call(o);
    if (_type === "[object Object]") {
      _type = "" + o.constructor;
    }
    return (/^\[object (\w+)\]$/.exec(_type) || /^\s*function\s+(\w+)/.exec(_type) || ["", "object"])[1].toLowerCase();
  }
};


/*
console.assert(type(null)      is "null",      "type null")
console.assert(type(undefined) is "undefined", "type undefined")
console.assert(type(true)      is "boolean",   "type boolean")
console.assert(type(0)         is "number",    "type number")
console.assert(type("string")  is "string",    "type string")
console.assert(type(->)        is "function",  "type function")
console.assert(type([])        is "array",     "type array")
console.assert(type({})        is "object",    "type object")
console.assert(type(new Date)  is "date",      "type date")
console.assert(type(Math)      is "math",      "type math")
console.assert(type(/0/)       is "regexp",    "type regexp")
console.assert(type(window)    is "global",    "type global")
console.assert(type(document.body) is "node",  "type node")
console.assert(type(new (class Foo)) is "foo", "type foo")
 */

space = function(i) {
  var j, results;
  return (function() {
    results = [];
    for (var j = 0; 0 <= i ? j <= i : j >= i; 0 <= i ? j++ : j--){ results.push(j); }
    return results;
  }).apply(this).map(function() {
    return "";
  }).join("  ");
};


/*
console.assert(space(0) is "",   "space 0")
console.assert(space(1) is "  ", "space 1")
 */

dir = function(o, max, i) {
  var dumpObj, v;
  if (max == null) {
    max = 1;
  }
  if (i == null) {
    i = 0;
  }
  dumpObj = function(o) {
    if (getPropertys(o).length === 0) {
      return "{}";
    } else {
      return "{\n" + ((getPropertys(o).map(function(k) {
        return "" + (space(i + 1)) + k + ": " + (dir(o[k], max, i + 1));
      })).join(",\n")) + "\n" + (space(i)) + "}";
    }
  };
  switch (type(o)) {
    case "null":
    case "undefined":
    case "boolean":
    case "number":
      return "" + o;
    case "string":
      return "\"" + o + "\"";
    case "function":
      return Object.prototype.toString.call(o);
    case "date":
      return JSON.stringify(o);
    case "array":
      if (i < max) {
        return "[" + (((function() {
          var j, len, results;
          results = [];
          for (j = 0, len = o.length; j < len; j++) {
            v = o[j];
            results.push(dir(v, max, i + 1));
          }
          return results;
        })()).join(", ")) + "]";
      } else {
        return Object.prototype.toString.call(o);
      }
      break;
    default:
      if (i < max) {
        return dumpObj(o);
      } else {
        return Object.prototype.toString.call(o);
      }
  }
};


/*
console.assert(dir({a:0}) is dir(Object.create({a:0})), "dir")
 */

if (window.CoffeeScript != null) {
  setTimeout(function() {
    return (new REPL).start();
  });
} else {
  include("http://coffeescript.org/extras/coffee-script.js", function() {
    return (new REPL).start();
  });
}
}
